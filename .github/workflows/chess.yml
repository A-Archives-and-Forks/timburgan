name: "Chess"

on:
  issues:
    types: [opened]

jobs:
  move:
    runs-on: ubuntu-latest
    if: startsWith(github.event.issue.title, 'chess|')
    steps:
    - if: startsWith(github.event.issue.title, 'chess|') && contains(github.event.issue.labels.*.name, 'test')
      run: |
        # the triggering issue contains test
        echo "${{ github.event_name }}"
        exit 1

    - name: Set env vars
      run: |
        echo "${{ github.event_name }}"
        echo "REPOSITORY=${{ github.repository }}" >> $GITHUB_ENV
        echo "EVENT_ISSUE_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_ENV
        echo "EVENT_USER_LOGIN=${{ github.event.issue.user.login }}" >> $GITHUB_ENV

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.3

    - name: Setup Gems
      run: |
        gem install activesupport -v 8.0.2 -N --silent
        gem install octokit -v 10.0.0 -N --silent
        gem install chess -v 0.4.0 -N --silent

    - name: Play
      run: |
        ruby <<- EORUBY
          require 'active_support'
          require 'active_support/core_ext/object'
          require 'active_support/core_ext/array'
          require 'octokit'
          require 'chess'

          def error_notification(repo_nwo, issue_num, reaction, new_comment_body, e = nil)
            @octokit.add_comment(repo_nwo, issue_num, new_comment_body)
            @octokit.close_issue(repo_nwo, issue_num)
            if e.present?
              puts '-----------'
              puts "Exception: #{e}"
              puts '-----------'
            end
          end

          def valid_new_game_request(game)
            '${{ github.event.issue.title }}'.split('|')&.second == 'new' &&
            (ENV.fetch('EVENT_USER_LOGIN') == 'timburgan' || game&.over?)
          end

          # Authenticate using GITHUB_TOKEN
          @octokit = Octokit::Client.new(access_token: "${{ secrets.GITHUB_TOKEN }}")
          @octokit.auto_paginate = true
          # Show we've got eyes on the triggering comment.
          @octokit.create_issue_reaction(
            ENV.fetch('REPOSITORY'),
            ENV.fetch('EVENT_ISSUE_NUMBER'),
            'eyes'
          )

          # Parse the issue title.
          begin
              title_split = '${{ github.event.issue.title }}'.split('|')
              CHESS_GAME_NUM   = title_split&.fourth || ENV.fetch('EVENT_ISSUE_NUMBER')
              CHESS_GAME_TITLE = "#{title_split&.first}#{CHESS_GAME_NUM}"
              CHESS_GAME_CMD   = title_split&.second.to_s
              CHESS_USER_MOVE  = title_split&.third.to_s
              raise StandardError, 'CHESS_GAME_TITLE is blank' if CHESS_GAME_TITLE.blank?
              raise StandardError, 'CHESS_USER_MOVE is blank' if CHESS_USER_MOVE.blank? && CHESS_GAME_CMD == 'move'
              raise StandardError, 'new|move are the only allowed commands' unless ['new', 'move'].include?(CHESS_GAME_CMD)
          rescue StandardError => e
              comment_text = "@#{ENV.fetch('EVENT_USER_LOGIN')} The game title or move was unable to be parsed."
              error_notification(ENV.fetch('REPOSITORY'), ENV.fetch('EVENT_ISSUE_NUMBER'), 'confused', comment_text, e)
              exit(0)
          end

          GAME_DATA_PATH = "chess_games/chess.pgn"
          TMP_FILENAME = "/tmp/chess.pgn"
          game = nil
          game_content = nil
          game_content_raw = nil

          # Get the contents of the game board.
          begin
              game_content_raw = @octokit.contents(
                ENV.fetch('REPOSITORY'),
                path: GAME_DATA_PATH
              )

              game_content = Base64.decode64(game_content_raw&.content.to_s) unless game_content_raw&.content.blank?
          rescue StandardError => e
              # no file exists... so no game... so... go ahead and create it
              game = Chess::Game.new
          else
            # Load existing game from content, unless this is a new game request
            if valid_new_game_request(nil)
              game = Chess::Game.new
            else
              # Game is in progress. Load the game board.
              begin
                  ## Load the current game
                  File.write TMP_FILENAME, game_content
                  game = Chess::Game.load_pgn TMP_FILENAME
              rescue StandardError => e
                  comment_text = "@#{ENV.fetch('EVENT_USER_LOGIN')} Game data couldn't loaded: #{GAME_DATA_PATH}"
                  error_notification(ENV.fetch('REPOSITORY'), ENV.fetch('EVENT_ISSUE_NUMBER'), 'confused', comment_text, e)
                  exit(0)
              end
            end
          end

          if valid_new_game_request(game) && game_content_raw.present?
            begin
              @octokit.delete_contents(
                ENV.fetch('REPOSITORY'),
                GAME_DATA_PATH,
                "@#{ENV.fetch('EVENT_USER_LOGIN')} delete to allow new game",
                game_content_raw&.sha,
                branch: 'master',
              )
            rescue StandardError => e
                comment_text = "@#{ENV.fetch('EVENT_USER_LOGIN')} Game data couldn't be deleted: #{GAME_DATA_PATH}"
                error_notification(ENV.fetch('REPOSITORY'), ENV.fetch('EVENT_ISSUE_NUMBER'), 'confused', comment_text, e)
                exit(0)
            end
          end

          if CHESS_GAME_CMD == 'move'
              # Share the play. Exit if user just had the prior move.
              begin
                last_mover_file = "chess_games/last_mover.txt"
                if File.exist?(last_mover_file) && ENV.fetch('REPOSITORY') == 'timburgan/timburgan'
                  last_mover = File.read(last_mover_file).strip
                  if last_mover == ENV.fetch('EVENT_USER_LOGIN')
                    comment_text = "@#{ENV.fetch('EVENT_USER_LOGIN')} Slow down! You _just_ moved, so can't immediately take the next turn."
                    error_notification(ENV.fetch('REPOSITORY'), ENV.fetch('EVENT_ISSUE_NUMBER'), 'confused', comment_text, nil)
                    exit(0)
                  end
                end
              rescue StandardError => e
                # don't exit, if file can't be read. Allow play to continue.
              end

              # Perform Move with retry logic for race conditions
              max_retries = 2
              retry_count = 0
              
              while retry_count <= max_retries
                begin
                  # Reload game state on retry to handle race conditions
                  if retry_count > 0
                    puts "Retrying move after race condition (attempt #{retry_count + 1})"
                    
                    # Reload the current game state
                    begin
                      current_game_content_raw = @octokit.contents(
                        ENV.fetch('REPOSITORY'),
                        path: GAME_DATA_PATH
                      )
                      current_game_content = Base64.decode64(current_game_content_raw&.content.to_s) unless current_game_content_raw&.content.blank?
                      File.write TMP_FILENAME, current_game_content
                      game = Chess::Game.load_pgn TMP_FILENAME
                      game_content_raw = current_game_content_raw
                    rescue StandardError => reload_error
                      puts "Failed to reload game state: #{reload_error}"
                      break
                    end
                  end

                  # Attempt the move
                  game.move(CHESS_USER_MOVE)
                  
                  # Save the game board
                  @octokit.create_contents(
                    ENV.fetch('REPOSITORY'),
                    GAME_DATA_PATH,
                    "#{ENV.fetch('EVENT_USER_LOGIN')} move #{CHESS_USER_MOVE}",
                    game.pgn.to_s,
                    branch: 'master',
                    sha:    game_content_raw&.sha
                  )
                  
                  # Success - break out of retry loop
                  break
                  
                rescue Chess::IllegalMoveError => e
                  if retry_count == 0
                    # On first attempt, this might be due to stale game state, so retry
                    retry_count += 1
                    next
                  else
                    # After retry, the move is genuinely invalid
                    comment_text = "@#{ENV.fetch('EVENT_USER_LOGIN')} Whaaa.. '#{CHESS_USER_MOVE}' is an invalid move! Usually this is because someone squeezed a move in just before you."
                    error_notification(ENV.fetch('REPOSITORY'), ENV.fetch('EVENT_ISSUE_NUMBER'), 'confused', comment_text, e)
                    exit(0)
                  end
                rescue Octokit::UnprocessableEntity => e
                  if e.message.include?('does not match') && retry_count < max_retries
                    # SHA conflict - retry with fresh game state
                    retry_count += 1
                    next
                  elsif e.message.include?('does not match')
                    # Exhausted retries
                    comment_text = "@#{ENV.fetch('EVENT_USER_LOGIN')} Multiple people are making moves at the same time! Please try again in a moment."
                    error_notification(ENV.fetch('REPOSITORY'), ENV.fetch('EVENT_ISSUE_NUMBER'), 'confused', comment_text, e)
                    exit(0)
                  else
                    comment_text = "@#{ENV.fetch('EVENT_USER_LOGIN')} Couldn't save game data. Sorry."
                    error_notification(ENV.fetch('REPOSITORY'), ENV.fetch('EVENT_ISSUE_NUMBER'), 'confused', comment_text, e)
                    exit(0)
                  end
                rescue StandardError => e
                  comment_text = "@#{ENV.fetch('EVENT_USER_LOGIN')} Couldn't save game data. Sorry."
                  error_notification(ENV.fetch('REPOSITORY'), ENV.fetch('EVENT_ISSUE_NUMBER'), 'confused', comment_text, e)
                  exit(0)
                end
              end

              # Update local data files to avoid API rate limiting
              begin
                # Update last mover
                File.write("chess_games/last_mover.txt", ENV.fetch('EVENT_USER_LOGIN'))
                
                # Update recent moves list
                recent_moves_file = "chess_games/recent_moves.txt"
                new_move = "| #{CHESS_USER_MOVE[0..1].upcase} to #{CHESS_USER_MOVE[2..3].upcase} | [@#{ENV.fetch('EVENT_USER_LOGIN')}](https://github.com/#{ENV.fetch('EVENT_USER_LOGIN')}) |"
                
                # Read existing moves, add new one at top, keep only last 5
                existing_moves = []
                if File.exist?(recent_moves_file)
                  existing_moves = File.readlines(recent_moves_file).map(&:strip).reject(&:empty?)
                end
                updated_moves = [new_move] + existing_moves[0..3]
                File.write(recent_moves_file, updated_moves.join("\n") + "\n")
                
                # Update leaderboard
                leaderboard_file = "chess_games/leaderboard.txt"
                leaderboard_lines = []
                user_found = false
                user_login = ENV.fetch('EVENT_USER_LOGIN')
                
                if File.exist?(leaderboard_file)
                  File.readlines(leaderboard_file).each do |line|
                    line = line.strip
                    next if line.empty?
                    
                    if line.include?("[@#{user_login}]")
                      # Update this user's count
                      if match = line.match(/\| (\d+) \|/)
                        new_count = match[1].to_i + 1
                        updated_line = line.sub(/\| \d+ \|/, "| #{new_count} |")
                        leaderboard_lines << updated_line
                        user_found = true
                      else
                        leaderboard_lines << line
                      end
                    else
                      leaderboard_lines << line
                    end
                  end
                end
                
                # If user not found, add them with count 1
                unless user_found
                  leaderboard_lines << "| 1 | [@#{user_login}](https://github.com/#{user_login}) |"
                end
                
                # Sort by count (descending) and keep top 20
                sorted_lines = leaderboard_lines.sort_by do |line|
                  match = line.match(/\| (\d+) \|/)
                  match ? -match[1].to_i : 0
                end.compact[0..19]
                
                File.write(leaderboard_file, sorted_lines.join("\n") + "\n")
                
              rescue StandardError => e
                # don't exit if local file updates fail, just continue
              end

              # Commit local file changes to repository
              begin
                system('git config --global user.email "action@github.com"')
                system('git config --global user.name "GitHub Action"')
                system('git add chess_games/')
                system("git commit -m \"#{ENV.fetch('EVENT_USER_LOGIN')} updated game files\"")
                system('git push')
              rescue StandardError => e
                # don't exit if git operations fail
              end

              # Game over thanks for playing.
              if game.over?
                @octokit.add_comment(ENV.fetch('REPOSITORY'), ENV.fetch('EVENT_ISSUE_NUMBER'), "That's game over! Thank you for playing.")
              end
          end

          @octokit.add_comment(ENV.fetch('REPOSITORY'), ENV.fetch('EVENT_ISSUE_NUMBER'), "@#{ENV.fetch('EVENT_USER_LOGIN')} Done. View back at https://github.com/timburgan")          
          @octokit.close_issue(ENV.fetch('REPOSITORY'), ENV.fetch('EVENT_ISSUE_NUMBER'))

          # Update timburgan/timburgan/README.md

          cols = ('a'..'h').to_a
          rows = (1..8).to_a

          # list squares on the board
          squares = []
          cols.each do |col|
            rows.each do |row|
              squares.push("#{col}#{row}")
            end
          end

          # combine squares with where they can MOVE to
          next_move_combos = squares.map { |from| { from: from, to: squares } }

          fake_game = if CHESS_GAME_CMD == 'move'
                        File.write TMP_FILENAME, game.pgn.to_s
                        Chess::Game.load_pgn TMP_FILENAME
                      else
                        Chess::Game.new
                      end

          # delete squares not valid for next move
          good_moves = []
          next_move_combos.each do |square|
            square[:to].each do |to|
              move_command = "#{square[:from]}#{to}"
              fake_game_tmp = if CHESS_GAME_CMD == 'move'
                                File.write TMP_FILENAME, fake_game.pgn.to_s
                                Chess::Game.load_pgn TMP_FILENAME
                              else
                                Chess::Game.new
                              end
              begin
                fake_game_tmp.move move_command
              rescue Chess::IllegalMoveError => e
                # invalid move
              else
                existing_move = good_moves.find { |move| move[:from] == square[:from] }
                if existing_move.nil?
                  good_moves.push({ from: square[:from], to: [to] })
                else
                  existing_move[:to].push(to)
                end
              end
            end
          end

          game_state = case game.status.to_s
                       when 'in_progress'
                         'Game is in progress.'
                       when 'white_won'
                         'Game won by white (hollow) with a checkmate.'
                       when 'black_won'
                         'Game won by black (solid) with a checkmate.'
                       when 'white_won_resign'
                         'Game won by white (hollow) by resign.'
                       when 'black_won_resign'
                         'Game won by black (solid) by resign.'
                       when 'stalemate'
                         'Game was a draw due to stalemate.'
                       when 'insufficient_material'
                         'Game was a draw due to insufficient material to checkmate.'
                       when 'fifty_rule_move'
                         'Game was a draw due to fifty rule move.'
                       when 'threefold_repetition'
                         'Game was a draw due to threshold repetition.'
                       else
                         'Game terminated. Something went wrong.'
                       end

          new_readme = <<~HTML

            ## Tim's Community Chess Tournament

            **#{game_state}** This is open to ANYONE to play the next move. That's the point. :wave:  It's your turn! Move a #{(game.board.active_color) ? 'black (solid)' : 'white (hollow)'} piece.

          HTML

          board = {
            "8": { a: 56, b: 57, c: 58, d: 59, e: 60, f: 61, g: 62, h: 63 },
            "7": { a: 48, b: 49, c: 50, d: 51, e: 52, f: 53, g: 54, h: 55 },
            "6": { a: 40, b: 41, c: 42, d: 43, e: 44, f: 45, g: 46, h: 47 },
            "5": { a: 32, b: 33, c: 34, d: 35, e: 36, f: 37, g: 38, h: 39 },
            "4": { a: 24, b: 25, c: 26, d: 27, e: 28, f: 29, g: 30, h: 31 },
            "3": { a: 16, b: 17, c: 18, d: 19, e: 20, f: 21, g: 22, h: 23 },
            "2": { a:  8, b:  9, c: 10, d: 11, e: 12, f: 13, g: 14, h: 15 },
            "1": { a:  0, b:  1, c:  2, d:  3, e:  4, f:  5, g:  6, h:  7 },
          }

          new_readme.concat "|   | A | B | C | D | E | F | G | H |\n"
          new_readme.concat "| - | - | - | - | - | - | - | - | - |\n"
          (1..8).to_a.reverse.each_with_index do |row|
            a = "![](https://raw.githubusercontent.com/#{ENV.fetch('REPOSITORY')}/master/chess_images/#{(game.board[board[:"#{row}"][:a]] || 'blank').to_s}.png)"
            b = "![](https://raw.githubusercontent.com/#{ENV.fetch('REPOSITORY')}/master/chess_images/#{(game.board[board[:"#{row}"][:b]] || 'blank').to_s}.png)"
            c = "![](https://raw.githubusercontent.com/#{ENV.fetch('REPOSITORY')}/master/chess_images/#{(game.board[board[:"#{row}"][:c]] || 'blank').to_s}.png)"
            d = "![](https://raw.githubusercontent.com/#{ENV.fetch('REPOSITORY')}/master/chess_images/#{(game.board[board[:"#{row}"][:d]] || 'blank').to_s}.png)"
            e = "![](https://raw.githubusercontent.com/#{ENV.fetch('REPOSITORY')}/master/chess_images/#{(game.board[board[:"#{row}"][:e]] || 'blank').to_s}.png)"
            f = "![](https://raw.githubusercontent.com/#{ENV.fetch('REPOSITORY')}/master/chess_images/#{(game.board[board[:"#{row}"][:f]] || 'blank').to_s}.png)"
            g = "![](https://raw.githubusercontent.com/#{ENV.fetch('REPOSITORY')}/master/chess_images/#{(game.board[board[:"#{row}"][:g]] || 'blank').to_s}.png)"
            h = "![](https://raw.githubusercontent.com/#{ENV.fetch('REPOSITORY')}/master/chess_images/#{(game.board[board[:"#{row}"][:h]] || 'blank').to_s}.png)"

            new_readme.concat "| #{row} | #{a} | #{b} | #{c} | #{d} | #{e} | #{f} | #{g} | #{h} |\n"
          end

          if game.over?
            new_readme.concat <<~HTML

              ## Play again? [![](https://raw.githubusercontent.com/#{ENV.fetch('REPOSITORY')}/master/chess_images/new_game.png)](https://github.com/#{ENV.fetch('REPOSITORY')}/issues/new?title=chess%7Cnew&body=Just+push+%27Submit+new+issue%27.+You+don%27t+need+to+do+anything+else.)

            HTML
          else
            new_readme.concat <<~HTML

              #### **#{(game.board.active_color) ? 'BLACK (solid)' : 'WHITE (hollow)'}:** It's your move... to choose _where_ to move...

              | FROM | TO - _just click one of the links_ :) |
              | ---- | -- |
            HTML

            good_moves.each do |move|
              new_readme.concat "| **#{move[:from].upcase}** | #{move[:to].map{|a| "[#{a.upcase}](https://github.com/#{ENV.fetch('REPOSITORY')}/issues/new?title=chess%7Cmove%7C#{move[:from]}#{a}%7C#{CHESS_GAME_NUM}&body=Just+push+%27Submit+new+issue%27.+You+don%27t+need+to+do+anything+else.)"}.join(' , ')} |\n"
            end
          end

          new_readme.concat <<~HTML

            Ask a friend to take the next move: [Share on Twitter...](https://twitter.com/share?text=I'm+playing+chess+on+a+GitHub+Profile+Readme!+Can+you+please+take+the+next+move+at+https://github.com/timburgan)

            **How this works**

            When you click a link, it opens a GitHub Issue with the required pre-populated text. Just push "Create New Issue". That will trigger a [GitHub Actions](https://github.blog/2020-07-03-github-action-hero-casey-lee/#getting-started-with-github-actions) workflow that'll update my GitHub Profile _README.md_ with the new state of the board.

            **Notice a problem?**

            Raise an [issue](https://github.com/#{ENV.fetch('REPOSITORY')}/issues), and include the text _cc @timburgan_.

            **Last few moves, this game**

            | Move  | Who |
            | ----- | --- |
          HTML

          # Read recent moves from local file instead of API calls to avoid rate limiting
          begin
            recent_moves_file = "chess_games/recent_moves.txt"
            if File.exist?(recent_moves_file)
              recent_moves = File.readlines(recent_moves_file).map(&:strip).reject(&:empty?)
              recent_moves[0..4]&.each do |move_line|
                new_readme.concat "#{move_line}\n"
              end
            else
              new_readme.concat "| ¯\\_(ツ)_/¯ | History temporarily unavailable. |\n"
            end
          rescue StandardError => e
            new_readme.concat "| ¯\\_(ツ)_/¯ | History temporarily unavailable. |\n"
          end

          new_readme.concat <<~HTML

            **Top 20 Leaderboard: Most moves across all games, except me.**

            | Moves | Who |
            | ----- | --- |
          HTML

          # Read leaderboard from local file instead of API calls to avoid rate limiting
          begin
            leaderboard_file = "chess_games/leaderboard.txt"
            if File.exist?(leaderboard_file)
              leaderboard_lines = File.readlines(leaderboard_file).map(&:strip).reject(&:empty?)
              leaderboard_lines.each do |leaderboard_line|
                new_readme.concat "#{leaderboard_line}\n"
              end
            else
              new_readme.concat "| ¯\\_(ツ)_/¯ | History temporarily unavailable. |\n"
            end
          rescue StandardError => e
            new_readme.concat "| ¯\\_(ツ)_/¯ | History temporarily unavailable. |\n"
          end

          # Update the game with next moves.
          begin
              current_readme_sha = @octokit.contents(
                ENV.fetch('REPOSITORY'),
                path: 'README.md'
              )&.sha

              @octokit.create_contents(
                ENV.fetch('REPOSITORY'),
                'README.md',
                "#{ENV.fetch('EVENT_USER_LOGIN')} move #{CHESS_USER_MOVE}",
                new_readme,
                branch: 'master',
                sha:    current_readme_sha
              )
          rescue StandardError => e
              comment_text = "@#{ENV.fetch('EVENT_USER_LOGIN')} Couldn't update render of the game board. Move *was* saved, however."
              error_notification(ENV.fetch('REPOSITORY'), ENV.fetch('EVENT_ISSUE_NUMBER'), 'confused', comment_text, e)
              exit(0)
          end
        EORUBY
